#!/usr/bin/env bash
while [[ "$PROJECT_DIR" != */MobilePassThrough ]]; do PROJECT_DIR="$(readlink -f "$(dirname "${PROJECT_DIR:-0}")")"; done
source "$PROJECT_DIR/scripts/utils/common/libs/helpers"
loadConfig

LOOKING_GLASS_VERSION="B4"
cd "${THIRDPARTY_DIR}"

if [ ! -f "./LookingGlass" ]; then
    # Get the source code
    git clone --single-branch --branch "${LOOKING_GLASS_VERSION}" --depth 1 --recursive https://github.com/gnif/LookingGlass.git
fi
CURRENT_LG_VERSION="$(cd LookingGlass && git branch --show-current)"
if [ "$CURRENT_LG_VERSION" != "$LOOKING_GLASS_VERSION" ]; then
    # If an old version of Looking Glass is detected, delete the old source code and get a clean copy of the required one
    rm -rf LookingGlass
    git clone --single-branch --branch "${LOOKING_GLASS_VERSION}" --depth 1 --recursive https://github.com/gnif/LookingGlass.git
fi

# Clean up (remove old builds etc.)
git clean -fdx

# Build the (Linux) client application
mkdir LookingGlass/client/build
cd LookingGlass/client/build
cmake ../
make

# Utilize systemd-tmpfiles to automatically set required permissions on /dev/shm/looking-glass
sudo bash -c "echo '#Type Path Mode UID GID Age Argument' > /etc/tmpfiles.d/10-looking-glass.conf"
sudo bash -c "echo 'f /dev/shm/looking-glass 0660 $(logname) kvm - ' >> /etc/tmpfiles.d/10-looking-glass.conf"
sudo systemd-tmpfiles --create /etc/tmpfiles.d/10-looking-glass.conf

# Adjust permissions for systems with AppArmor
if [ -d "/etc/apparmor.d" ]; then
    if ! sudo cat /etc/apparmor.d/local/abstractions/libvirt-qemu | grep --quiet '/dev/shm/looking-glass rw,'; then
        sudo bash -c "echo '/dev/shm/looking-glass rw,' >> /etc/apparmor.d/local/abstractions/libvirt-qemu"
        sudo systemctl restart apparmor
    fi
fi

# Adjust permissions for systems with SELinux
if [ -d "/etc/selinux" ]; then
    TE_FILE="./lookingglass-fix-qemu.te"
    MOD_FILE="./lookingglass-fix-qemu.mod"
    PP_FILE="./lookingglass-fix-qemu.pp"
    echo "module lookingglass-fix-qemu 1.0;" > "${TE_FILE}"
    echo "" >> "${TE_FILE}"
    echo "require {" >> "${TE_FILE}"
    echo "        type tmpfs_t;" >> "${TE_FILE}"
    echo "        type svirt_t;" >> "${TE_FILE}"
    echo "        class file { getattr map open };" >> "${TE_FILE}"
    echo "}" >> "${TE_FILE}"
    echo "" >> "${TE_FILE}"
    echo "#============= svirt_t ==============" >> "${TE_FILE}"
    echo "allow svirt_t tmpfs_t:file { getattr open };" >> "${TE_FILE}"
    echo "" >> "${TE_FILE}"
    echo "#!!!! This avc can be allowed using the boolean 'domain_can_mmap_files'" >> "${TE_FILE}"
    echo "allow svirt_t tmpfs_t:file map;" >> "${TE_FILE}"

    checkmodule -M -m -o "${MOD_FILE}" "${TE_FILE}"
    semodule_package -o "${PP_FILE}" -m "${MOD_FILE}"
    sudo semodule -i "${PP_FILE}"
fi

# Download the Nvidia Capture SDK if it hasn'T been downlaoded already
cd "${THIRDPARTY_DIR}"
if [ ! -f "./Capture_Linux_v8.0.4" ]; then
    wget https://developer.nvidia.com/capture_sdk/downloads/v8.0.4/linux -O ./nvidia_capture_api.tgz
    #rm -rf ./Capture_Linux_v8.0.4
    tar -xvzf ./nvidia_capture_api.tgz 
    rm ./nvidia_capture_api.tgz
fi

# Build the (Windows) host application
cp ./Capture_Linux_v8.0.4 ./LookingGlass/
cd LookingGlass
cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_TOOLCHAIN_FILE=./host/toolchain-mingw64.cmake -DNVFBC_SDK='./Capture_Linux_v8.0.4' -DUSE_NVFBC=1 ./host
make

#wget "https://ci.appveyor.com/api/projects/rainers/visuald/artifacts/cv2pdb.exe?job=Environment%3A%20os%3DVisual%20Studio%202015%2C%20VS%3D14%2C%20APPVEYOR_BUILD_WORKER_IMAGE%3DVisual%20Studio%202015" -O "cv2pdb.exe"
#wine './cv2pdb.exe' './looking-glass-host.exe'
makensis './platform/Windows/installer.nsi'